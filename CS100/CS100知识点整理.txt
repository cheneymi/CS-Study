
1.整体概论
	→ 价值观
		学编程前，想一想为什么要学编程
		学习不是生活的全部
		快乐比优秀更重要
	→ 宏观方法论（怎样学习）
		兴趣是最好的老师
		利用网络自己解决问题
		冰川式学习
	→ 微观方法论（怎样解题/编程）
		建模>算法>语言
		根据{}的层次看代码（自己的和别人的）
		寻找合适的状态空间
		根据数据规模猜测算法
		应试
			剔除故事情节
			建模，确定算法
			设计伪代码
			编码
			测试/调试
		分治算法：充分利用子问题的解
		递推算法：寻找自相似
		递归：心中有完整的图、明白身在何处
		回溯法：尽可能早剪枝

2.C++语言
	→ HelloWorld
	→ 数据类型
		基本类型
			int
			double/float
			string（字符数组）
			bool（就是int）
		容器类型
			数组
			vector：reserve、push_back、size
			priority_queue：push、top、pop
		自定义类型（类）
			成员变量
			构造函数（函数名与类名相同）
			成员函数
			可视性（public、private）
			取成员运算：.
		指针
			指针可以实现灵活的数据结构
			声明指针：类型前加*
			指针运算
				取地址：&
				取指针值：*
				取类指针的成员值：->（等价于先取值再取成员）
	→ 运算
		基本运算
			数学运算（+、-、*、/、%、>、<、>=、<=、==、!=）
			逻辑运算（&&、||、!）
			位运算（&、|、^、<<、>>、!）
				按二进制位运算
				交换律、结合律、自反律
				压缩存储
				位运算符合计算机底层运算机制，所以都比较快
			累加运算（+=、-=、*=、\=、%=、++、--、<<=、>>=）
			三元表达式（a>b?x:y）
	→ 程序基本流程
		输入输出（cin、cout）
		分支（if、else、switch）
		循环（for、while）
	→ 程序结构
		预编译（include）
		using
		函数/类
			变量声明
			语句
		main函数
		函数签名
		全局变量
	→ 其他语法
		文件读写（重定向）
		模板（template，写在<>里的类型）
		跨文件调用（头文件）

3.线性算法
	→ 递推
		尝试寻找自相似
		状态转移
	→ 链表
		增删的复杂度低，查找的复杂度高

4.分支算法
	→ 归并排序（通过3个游标实现合并）
	→ 分治法
		尝试寻找自相似
		合并过程中充分利用子问题已解的额外条件
	→ BST
		左子树小于根，右子树大于根
		维护动态有序性时，平衡CRUD的时间性能（中庸之道）
		插入
		查找
		平衡二叉树（应对退化问题）：Treap、红黑树、伸展树、SBT
	→ 堆（优先队列）
		满二叉树，子树都大于/小于根
		插入
		删除根节点
		堆排序

5.搜索算法
	→ 暴力枚举
	→ 回溯法（隐式遍历，深搜）
		确定状态
		递归枚举
		剪枝（提前回头）
			尽早判断题目的条件
			边界裁剪（临近边界的时候设法直接解决）
			利用对称性

6.其他算法
	→ 基数排序（仅对整数适用）
	→ 并查集（专用于集合合并/查找的高效算法）

7.测试/修正程序
	→ 调试
		设置断点
		添加查看变量
		单步运行
	→ 利用日志（提交前不要忘记去掉）
	→ 二分注释方法
